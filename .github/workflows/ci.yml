name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        database: ["sqlite", "postgresql"]
        exclude:
          # Only test PostgreSQL with Python 3.11 to reduce CI time
          - python-version: "3.10"
            database: "postgresql"
          - python-version: "3.12"
            database: "postgresql"

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: fpl_toolkit_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Only start PostgreSQL service when needed
        if: matrix.database == 'postgresql'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,db,web,ai]

    - name: Install PostgreSQL dependencies
      if: matrix.database == 'postgresql'
      run: |
        pip install -e .[postgresql]

    - name: Set up environment variables
      run: |
        if [ "${{ matrix.database }}" = "postgresql" ]; then
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/fpl_toolkit_test" >> $GITHUB_ENV
        else
          echo "DATABASE_URL=" >> $GITHUB_ENV
        fi

    - name: Wait for PostgreSQL
      if: matrix.database == 'postgresql'
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Lint with ruff
      run: |
        ruff check src tests
        ruff format --check src tests

    - name: Type check with mypy
      run: |
        mypy src/fpl_toolkit --ignore-missing-imports
      continue-on-error: true  # Don't fail CI on type errors initially

    - name: Test with pytest
      run: |
        pytest -v --tb=short --cov=src/fpl_toolkit --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Upload coverage reports
      if: matrix.python-version == '3.11' && matrix.database == 'sqlite'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,db,web,ai]

    - name: Test API server startup
      run: |
        timeout 30s python -c "
        import uvicorn
        from src.fpl_toolkit.service.api import app
        import threading
        import time
        import requests
        
        # Start server in background
        def run_server():
            uvicorn.run(app, host='127.0.0.1', port=8000, log_level='error')
        
        server_thread = threading.Thread(target=run_server, daemon=True)
        server_thread.start()
        
        # Wait for server to start
        time.sleep(5)
        
        # Test health endpoint
        try:
            response = requests.get('http://127.0.0.1:8000/health', timeout=5)
            assert response.status_code == 200
            assert response.json()['status'] == 'ok'
            print('✅ API server started successfully')
        except Exception as e:
            print(f'❌ API server test failed: {e}')
            exit(1)
        " || echo "⚠️ API server test skipped (timeout)"

    - name: Test CLI commands
      run: |
        python -m src.fpl_toolkit.cli --help
        python -m src.fpl_toolkit.cli version
        python -m src.fpl_toolkit.cli init
      env:
        DATABASE_URL: sqlite:///test_cli.db

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit Security Scan
      uses: tj-actions/bandit@v5.1
      with:
        options: "-r src/ -f json -o bandit-report.json"
        
    - name: Upload Bandit Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  build-package:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/