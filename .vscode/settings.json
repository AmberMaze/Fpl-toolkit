{
    // Theme and editor configuration
    "workbench.colorTheme": "Tokyo Right",
    "editor.formatOnSave": true,
    "editor.rulers": [88],
    "editor.wordWrap": "bounded",
    "editor.wordWrapColumn": 88,
    "editor.minimap.enabled": true,
    "editor.bracketPairColorization.enabled": true,
    "editor.guides.bracketPairs": true,
    "editor.inlineSuggest.enabled": true,
    "explorer.confirmDragAndDrop": false,
    "workbench.startupEditor": "welcomePage",
    
    // GitHub Copilot configuration
    "github.copilot.enable": {
        "*": true,
        "yaml": false,
        "plaintext": false
    },
    "github.copilot.editor.enableAutoCompletions": true,
    "github.copilot.chat.toolset": "fpl-toolkit",
    "github.copilot.chat.instructionsFile": ".github/copilot-instructions.md",
    
    // Python development
    "python.analysis.typeCheckingMode": "basic",
    "python.analysis.extraPaths": ["./src"],
    "python.analysis.autoImportCompletions": true,
    "python.analysis.include": ["src"],
    "python.defaultInterpreterPath": "./venv/bin/python",
    "python.terminal.activateEnvironment": true,
    "python.testing.pytestEnabled": true,
    "python.testing.unittestEnabled": false,
    "python.testing.autoTestDiscoverOnSaveEnabled": true,
    
    // Language formatters
    "[python]": { 
        "editor.defaultFormatter": "ms-python.black-formatter",
        "editor.tabSize": 4,
        "editor.insertSpaces": true,
        "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit"
        }
    },
    "[json]": { 
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.tabSize": 2
    },
    "[yaml]": { 
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.tabSize": 2
    },
    "[markdown]": {
        "editor.defaultFormatter": "yzhang.markdown-all-in-one",
        "editor.wordWrap": "on"
    },
    "[dockerfile]": {
        "editor.tabSize": 2
    },
    
    // File associations
    "files.associations": {
        "*.env*": "properties",
        "Dockerfile*": "dockerfile",
        "*.http": "http",
        "*.rest": "http"
    },
    
    // Git configuration
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    "git.autofetch": true,
    "git.openRepositoryInParentFolders": "always",
    
    // Spell checking with FPL terms
    "cSpell.userWords": [
        "fpl", "toolkit", "gameweek", "xG", "xA", "FastAPI", "Streamlit",
        "SQLAlchemy", "Pydantic", "uvicorn", "pytest", "mypy", "ruff",
        "differentials", "captaincy", "wildcards", "benchboost", "freehit"
    ],
    
    // Search and file exclusions
    "search.exclude": {
        "**/venv": true,
        "**/__pycache__": true,
        "**/.pytest_cache": true,
        "**/htmlcov": true,
        "**/.mypy_cache": true,
        "**/.ruff_cache": true,
        "**/node_modules": true,
        "**/.git": true
    },
    "files.exclude": {
        "**/__pycache__": true,
        "**/.pytest_cache": true
    },
    
    // REST Client configuration
    "rest-client.environmentVariables": {
        "local": {
            "baseUrl": "http://localhost:8000",
            "apiUrl": "http://localhost:8000/api"
        },
        "production": {
            "baseUrl": "https://fpl-toolkit.onrender.com",
            "apiUrl": "https://fpl-toolkit.onrender.com/api"
        }
    },
    
    // Database configuration
    "postgresql.connections": [],
    
    // Docker configuration
    "docker.attachShellCommand.linuxContainer": "/bin/bash",
    
    // Error display
    "errorLens.enabledDiagnosticLevels": ["error", "warning", "info"],
    "errorLens.excludeByMessage": ["never used"],
    
    // Todo Tree configuration
    "todo-tree.general.tags": [
        "TODO",
        "FIXME",
        "BUG",
        "HACK",
        "NOTE"
    ],
    
    // Terminal with PYTHONPATH
    "terminal.integrated.profiles.linux": {
        "bash": {
            "path": "bash",
            "env": {
                "PYTHONPATH": "${workspaceFolder}/src"
            }
        }
    },
    "terminal.integrated.defaultProfile.linux": "bash",
    
    // Jupyter configuration
    "jupyter.askForKernelRestart": false,
    "jupyter.interactiveWindow.collapseCellInputCode": "fromKeyboard"
}